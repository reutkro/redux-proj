{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchTodos } from \"./todoAPI\";\nconst todos = [{\n  title: \"a\",\n  done: true\n}, {\n  title: \"b\",\n  done: false\n}, {\n  title: \"c\",\n  done: true\n}];\nexport const getTodos = createAsyncThunk('store/fetchTodos', async amount => {\n  const response = await fetchTodos(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nconst initialState = {\n  userName: \"aaa\",\n  todoList: todos\n};\nexport const todoSlice = createSlice({\n  name: \"todoList\",\n  initialState,\n  reducers: {\n    changeDone: (state, action) => {\n      state.todoList[action.payload].done = !state.todoList[action.payload].done;\n    },\n    changeUserName: (state, action) => {\n      state.userName = action.payload;\n    },\n    addTodo: (state, action) => {\n      state.todoList.push({\n        title: action.payload,\n        done: false\n      });\n    },\n    deleteTodo: (state, action) => {\n      state.todoList.splice(action.payload, 1);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getTodos.fulfilled, (state, action) => {\n      action.payload.map(info => {\n        state.todoList.push(info);\n      });\n    });\n  }\n});\nexport const addNewTodo = title => (dispatch, getState) => {\n  if (!title) {\n    alert(\"ssssssssssss\");\n  } else {\n    dispatch(addTodo(title));\n  }\n};\nexport default todoSlice.reducer;\nexport const {\n  changeDone,\n  changeUserName,\n  addTodo,\n  deleteTodo\n} = todoSlice.actions;\nexport const selectTodo = state => state.list.todoList;\nexport const selectUserName = state => state.list.userName;","map":{"version":3,"sources":["/home/reut/practice-redux/redux-proj/src/store/slice.ts"],"names":["createAsyncThunk","createSlice","fetchTodos","todos","title","done","getTodos","amount","response","data","initialState","userName","todoList","todoSlice","name","reducers","changeDone","state","action","payload","changeUserName","addTodo","push","deleteTodo","splice","extraReducers","builder","addCase","fulfilled","map","info","addNewTodo","dispatch","getState","alert","reducer","actions","selectTodo","list","selectUserName"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAGA,SAASC,UAAT,QAA2B,WAA3B;AAOA,MAAMC,KAAK,GAAG,CACV;AAAEC,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,IAAI,EAAE;AAApB,CADU,EAEV;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,IAAI,EAAE;AAApB,CAFU,EAGV;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,IAAI,EAAE;AAApB,CAHU,CAAd;AAMA,OAAO,MAAMC,QAAQ,GAAGN,gBAAgB,CACpC,kBADoC,EAEpC,MAAOO,MAAP,IAAsD;AAClD,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC,CADkD,CAElD;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACH,CANmC,CAAjC;AASP,MAAMC,YAAqB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,KADgB;AAE1BC,EAAAA,QAAQ,EAAGT;AAFe,CAA9B;AAKA,OAAO,MAAMU,SAAS,GAAGZ,WAAW,CAChC;AACIa,EAAAA,IAAI,EAAE,UADV;AAEIJ,EAAAA,YAFJ;AAGIK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACC,OAAtB,EAA+Bd,IAA/B,GAAsC,CAACY,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACC,OAAtB,EAA+Bd,IAAtE;AACH,KAHK;AAINe,IAAAA,cAAc,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACC,OAAxB;AACH,KANK;AAONE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAExBD,MAAAA,KAAK,CAACL,QAAN,CAAeU,IAAf,CAAoB;AAChBlB,QAAAA,KAAK,EAAEc,MAAM,CAACC,OADE;AAEhBd,QAAAA,IAAI,EAAE;AAFU,OAApB;AAIH,KAbK;AAcNkB,IAAAA,UAAU,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACL,QAAN,CAAeY,MAAf,CAAsBN,MAAM,CAACC,OAA7B,EAAsC,CAAtC;AACH;AAhBK,GAHd;AAqBIM,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,QAAQ,CAACsB,SAAzB,EAAoC,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACnDA,MAAAA,MAAM,CAACC,OAAP,CAAeU,GAAf,CAAmBC,IAAI,IAAI;AACvBb,QAAAA,KAAK,CAACL,QAAN,CAAeU,IAAf,CAAoBQ,IAApB;AACH,OAFD;AAIH,KALD;AAMH;AA5BL,CADgC,CAA7B;AAiCP,OAAO,MAAMC,UAAU,GAAI3B,KAAD,IAAoC,CAAC4B,QAAD,EAAWC,QAAX,KAAwB;AAClF,MAAI,CAAC7B,KAAL,EAAY;AACR8B,IAAAA,KAAK,CAAC,cAAD,CAAL;AACH,GAFD,MAEO;AACHF,IAAAA,QAAQ,CAACX,OAAO,CAACjB,KAAD,CAAR,CAAR;AACH;AACJ,CANM;AAQP,eAAeS,SAAS,CAACsB,OAAzB;AAEA,OAAO,MAAM;AAAEnB,EAAAA,UAAF;AAAcI,EAAAA,cAAd;AAA8BC,EAAAA,OAA9B;AAAuCE,EAAAA;AAAvC,IAAsDV,SAAS,CAACuB,OAAtE;AAEP,OAAO,MAAMC,UAAU,GAAIpB,KAAD,IAAsBA,KAAK,CAACqB,IAAN,CAAW1B,QAApD;AACP,OAAO,MAAM2B,cAAc,GAAItB,KAAD,IAAsBA,KAAK,CAACqB,IAAN,CAAW3B,QAAxD","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport { RootState } from \"./store\"\nimport { AppThunk } from \"./store\"\nimport { fetchTodos } from \"./todoAPI\"\n\ninterface TodoInt {\n    userName: string,\n    todoList: { title: string, done: boolean }[] \n}\n\nconst todos = [\n    { title: \"a\", done: true },\n    { title: \"b\", done: false },\n    { title: \"c\", done: true }\n]\n\nexport const getTodos = createAsyncThunk(\n    'store/fetchTodos',\n    async (amount: { title: string, done: boolean }[]) => {\n        const response = await fetchTodos(amount);\n        // The value we return becomes the `fulfilled` action payload\n        return response.data;\n    }\n)\n\nconst initialState: TodoInt = {\n    userName: \"aaa\",\n    todoList : todos\n}\n\nexport const todoSlice = createSlice(\n    {\n        name: \"todoList\",\n        initialState,\n        reducers: {\n            changeDone: (state, action) => {\n                state.todoList[action.payload].done = !state.todoList[action.payload].done;\n            },\n            changeUserName: (state, action) => {\n                state.userName = action.payload\n            },\n            addTodo: (state, action) => {\n\n                state.todoList.push({\n                    title: action.payload,\n                    done: false\n                })\n            },\n            deleteTodo: (state, action) => {\n                state.todoList.splice(action.payload, 1);\n            }\n        },\n        extraReducers: (builder) => {\n            builder.addCase(getTodos.fulfilled, (state, action) => {\n                action.payload.map(info => {\n                    state.todoList.push(info);\n                })\n\n            });\n        }\n    }\n)\n\nexport const addNewTodo = (title: string | null): AppThunk => (dispatch, getState) => {\n    if (!title) {\n        alert(\"ssssssssssss\")\n    } else {\n        dispatch(addTodo(title))\n    }\n}\n\nexport default todoSlice.reducer;\n\nexport const { changeDone, changeUserName, addTodo, deleteTodo } = todoSlice.actions;\n\nexport const selectTodo = (state: RootState) => state.list.todoList;\nexport const selectUserName = (state: RootState) => state.list.userName;"]},"metadata":{},"sourceType":"module"}