{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst todos = [{\n  title: \"a\",\n  done: true\n}, {\n  title: \"b\",\n  done: false\n}, {\n  title: \"c\",\n  done: true\n}];\nconst initialState = {\n  userName: \"aaa\",\n  todoList: todos\n};\nexport const todoSlice = createSlice({\n  name: \"todoList\",\n  initialState,\n  reducers: {\n    changeDone: (state, action) => {\n      state.todoList[action.payload].done = !state.todoList[action.payload].done;\n    },\n    changeUserName: (state, action) => {\n      state.userName = action.payload;\n    },\n    addTodo: (state, action) => (dispatch, getState) => {\n      if (!action.payload) {\n        alert(\"please enter a valid todo\");\n      } else {\n        state.todoList.push({\n          title: action.payload,\n          done: false\n        });\n      }\n    },\n    deleteTodo: (state, action) => {\n      state.todoList.splice(action.payload, 1);\n    }\n  }\n});\nexport const addNewTodo = p => (dispatch, getState) => {\n  if (!p) {\n    alert(\"please enter a valid todo\");\n  } else {\n    dispatch(addTodo(p));\n  }\n};\nexport default todoSlice.reducer;\nexport const {\n  changeDone,\n  changeUserName,\n  addTodo,\n  deleteTodo\n} = todoSlice.actions;\nexport const selectTodo = state => state.list.todoList;\nexport const selectUserName = state => state.list.userName;","map":{"version":3,"sources":["/home/reut/practice-redux/src/store/slice.ts"],"names":["createSlice","todos","title","done","initialState","userName","todoList","todoSlice","name","reducers","changeDone","state","action","payload","changeUserName","addTodo","dispatch","getState","alert","push","deleteTodo","splice","addNewTodo","p","reducer","actions","selectTodo","list","selectUserName"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AASA,MAAMC,KAAK,GAAG,CACV;AAAEC,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,IAAI,EAAE;AAApB,CADU,EAEV;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,IAAI,EAAE;AAApB,CAFU,EAGV;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,IAAI,EAAE;AAApB,CAHU,CAAd;AAMA,MAAMC,YAAqB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,KADgB;AAE1BC,EAAAA,QAAQ,EAAEL;AAFgB,CAA9B;AAKA,OAAO,MAAMM,SAAS,GAAGP,WAAW,CAChC;AACIQ,EAAAA,IAAI,EAAE,UADV;AAEIJ,EAAAA,YAFJ;AAGIK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACC,OAAtB,EAA+BV,IAA/B,GAAsC,CAACQ,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACC,OAAtB,EAA+BV,IAAtE;AACH,KAHK;AAINW,IAAAA,cAAc,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACC,OAAxB;AACH,KANK;AAONE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA6B,CAACI,QAAD,EAAWC,QAAX,KAAwB;AAC1D,UAAI,CAACL,MAAM,CAACC,OAAZ,EAAqB;AACjBK,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACH,OAFD,MAEO;AACHP,QAAAA,KAAK,CAACL,QAAN,CAAea,IAAf,CAAoB;AAChBjB,UAAAA,KAAK,EAAEU,MAAM,CAACC,OADE;AAEhBV,UAAAA,IAAI,EAAE;AAFU,SAApB;AAIH;AACJ,KAhBK;AAiBNiB,IAAAA,UAAU,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACL,QAAN,CAAee,MAAf,CAAsBT,MAAM,CAACC,OAA7B,EAAsC,CAAtC;AACH;AAnBK;AAHd,CADgC,CAA7B;AA4BP,OAAO,MAAMS,UAAU,GAAIC,CAAD,IAAgC,CAACP,QAAD,EAAWC,QAAX,KAAwB;AAC9E,MAAI,CAACM,CAAL,EAAQ;AACJL,IAAAA,KAAK,CAAC,2BAAD,CAAL;AACH,GAFD,MAEO;AACHF,IAAAA,QAAQ,CAACD,OAAO,CAACQ,CAAD,CAAR,CAAR;AACH;AACJ,CANM;AAQP,eAAehB,SAAS,CAACiB,OAAzB;AAEA,OAAO,MAAM;AAAEd,EAAAA,UAAF;AAAcI,EAAAA,cAAd;AAA8BC,EAAAA,OAA9B;AAAuCK,EAAAA;AAAvC,IAAsDb,SAAS,CAACkB,OAAtE;AAEP,OAAO,MAAMC,UAAU,GAAIf,KAAD,IAAsBA,KAAK,CAACgB,IAAN,CAAWrB,QAApD;AACP,OAAO,MAAMsB,cAAc,GAAIjB,KAAD,IAAsBA,KAAK,CAACgB,IAAN,CAAWtB,QAAxD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport { RootState } from \"./store\"\nimport { AppThunk } from \"./store\"\n\ninterface TodoInt {\n    userName: string,\n    todoList: { title: string, done: boolean }[]\n}\n\nconst todos = [\n    { title: \"a\", done: true },\n    { title: \"b\", done: false },\n    { title: \"c\", done: true }\n]\n\nconst initialState: TodoInt = {\n    userName: \"aaa\",\n    todoList: todos\n}\n\nexport const todoSlice = createSlice(\n    {\n        name: \"todoList\",\n        initialState,\n        reducers: {\n            changeDone: (state, action) => {\n                state.todoList[action.payload].done = !state.todoList[action.payload].done;\n            },\n            changeUserName: (state, action) => {\n                state.userName = action.payload\n            },\n            addTodo: (state, action): AppThunk => (dispatch, getState) => {\n                if (!action.payload) {\n                    alert(\"please enter a valid todo\")\n                } else {\n                    state.todoList.push({\n                        title: action.payload,\n                        done: false\n                    })\n                }\n            },\n            deleteTodo: (state, action) => {\n                state.todoList.splice(action.payload, 1);\n            }\n        }\n    }\n)\n\nexport const addNewTodo = (p: string | null): AppThunk => (dispatch, getState) => {\n    if (!p) {\n        alert(\"please enter a valid todo\")\n    } else {\n        dispatch(addTodo(p))\n    }\n}\n\nexport default todoSlice.reducer;\n\nexport const { changeDone, changeUserName, addTodo, deleteTodo } = todoSlice.actions;\n\nexport const selectTodo = (state: RootState) => state.list.todoList;\nexport const selectUserName = (state: RootState) => state.list.userName;"]},"metadata":{},"sourceType":"module"}