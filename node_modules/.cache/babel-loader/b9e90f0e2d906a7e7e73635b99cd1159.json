{"ast":null,"code":"var _jsxFileName = \"/home/reut/practice-redux/src/store/Todoes.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"./hooks\";\nimport { changeDone, changeUserName, addTodo, deleteTodo, selectTodo, selectUserName } from \"./slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoList = () => {\n  _s();\n\n  const [newTitle, setNewTitle] = useState('');\n  const [newUserName, setNewUserName] = useState('');\n  const todo = useAppSelector(selectTodo);\n  const userName = useAppSelector(selectUserName);\n  const dispatch = useAppDispatch();\n\n  const hendelNewTitle = e => {\n    setNewTitle(e);\n  };\n\n  const hendelNewUserName = e => {\n    setNewTitle(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"user: \", userName, todo.map((todo, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [todo.title, \":\", todo.done ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(changeDone(i)),\n        children: \" done \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(changeDone(i)),\n        children: \"not done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 96\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(deleteTodo(i)),\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 36\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"addTodo: title: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        onChange: e => hendelNewTitle(e.target.value),\n        value: newTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(addTodo(newTitle)),\n        children: \" \\u05D0\\u05D9\\u05E9\\u05D5\\u05E8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"change user name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        onChange: e => hendelNewUserName(e.target.value),\n        value: newUserName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(changeUserName(newUserName)),\n        children: \" \\u05D0\\u05D9\\u05E9\\u05D5\\u05E8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoList, \"zDXSPtTX2N23XRHZ/WATeN1cxds=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppDispatch];\n});\n\n_c = TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/home/reut/practice-redux/src/store/Todoes.tsx"],"names":["React","useState","useAppSelector","useAppDispatch","changeDone","changeUserName","addTodo","deleteTodo","selectTodo","selectUserName","TodoList","newTitle","setNewTitle","newUserName","setNewUserName","todo","userName","dispatch","hendelNewTitle","e","hendelNewUserName","map","i","title","done","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,SAA/C;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,OAArC,EAA8CC,UAA9C,EAA0DC,UAA1D,EAAsEC,cAAtE,QAA4F,SAA5F;;AAEA,OAAO,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAEpC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMc,IAAI,GAAGb,cAAc,CAACM,UAAD,CAA3B;AACA,QAAMQ,QAAQ,GAAGd,cAAc,CAACO,cAAD,CAA/B;AACA,QAAMQ,QAAQ,GAAGd,cAAc,EAA/B;;AAEA,QAAMe,cAAc,GAAIC,CAAD,IAAe;AAClCP,IAAAA,WAAW,CAACO,CAAD,CAAX;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAID,CAAD,IAAe;AACrCP,IAAAA,WAAW,CAACO,CAAD,CAAX;AACH,GAFD;;AAIA,sBACI;AAAA,yBACWH,QADX,EAEKD,IAAI,CAACM,GAAL,CAAS,CAACN,IAAD,EAAOO,CAAP,kBAAa;AAAA,iBAClBP,IAAI,CAACQ,KADa,OAElBR,IAAI,CAACS,IAAL,gBAAY;AAAQ,QAAA,OAAO,EAAE,MAAMP,QAAQ,CAACb,UAAU,CAACkB,CAAD,CAAX,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAZ,gBAA8E;AAAQ,QAAA,OAAO,EAAE,MAAML,QAAQ,CAACb,UAAU,CAACkB,CAAD,CAAX,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAF5D,eAGnB;AAAQ,QAAA,OAAO,EAAE,MAAML,QAAQ,CAACV,UAAU,CAACe,CAAD,CAAX,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHmB;AAAA,OAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,YAAtB,CAFL,eAOI;AAAA,kDAEW;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,QAAQ,EAAGH,CAAD,IAAOD,cAAc,CAACC,CAAC,CAACM,MAAF,CAASC,KAAV,CAApD;AAAsE,QAAA,KAAK,EAAEf;AAA7E;AAAA;AAAA;AAAA;AAAA,cAFX,eAGI;AAAQ,QAAA,OAAO,EAAE,MAAMM,QAAQ,CAACX,OAAO,CAACK,QAAD,CAAR,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAYI;AAAA,mDACA;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,QAAQ,EAAGQ,CAAD,IAAOC,iBAAiB,CAACD,CAAC,CAACM,MAAF,CAASC,KAAV,CAAvD;AAAyE,QAAA,KAAK,EAAEb;AAAhF;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAQ,QAAA,OAAO,EAAE,MAAMI,QAAQ,CAACZ,cAAc,CAACQ,WAAD,CAAf,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAnCM;;GAAMH,Q;UAIIR,c,EACIA,c,EACAC,c;;;KANRO,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"./hooks\";\nimport { changeDone, changeUserName, addTodo, deleteTodo, selectTodo, selectUserName } from \"./slice\";\n\nexport const TodoList: React.FC = () => {\n\n    const [newTitle, setNewTitle] = useState('')\n    const [newUserName, setNewUserName] = useState('')\n    const todo = useAppSelector(selectTodo)\n    const userName = useAppSelector(selectUserName)\n    const dispatch = useAppDispatch();\n\n    const hendelNewTitle = (e: string) => {\n        setNewTitle(e)\n    }\n\n    const hendelNewUserName = (e: string) => {\n        setNewTitle(e)\n    }\n\n    return (\n        <div>\n            user: {userName}\n            {todo.map((todo, i) => <div key={i}>\n                {todo.title}:\n                {todo.done ? <button onClick={() => dispatch(changeDone(i))}> done </button> : <button onClick={() => dispatch(changeDone(i))}>not done</button>}\n                <button onClick={() => dispatch(deleteTodo(i))}>delete</button>\n            </div>)}\n            <div>\n                addTodo: \n                title: <input type=\"string\" onChange={(e) => hendelNewTitle(e.target.value)} value={newTitle} />\n                <button onClick={() => dispatch(addTodo(newTitle))} > אישור</button>\n            </div>\n            <div>change user name: \n            <input type=\"string\" onChange={(e) => hendelNewUserName(e.target.value)} value={newUserName} />\n            <button onClick={() => dispatch(changeUserName(newUserName))} > אישור</button>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}