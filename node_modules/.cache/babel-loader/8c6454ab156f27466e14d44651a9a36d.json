{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { todos } from \"./infoTodos\";\nimport { fetchTodos } from \"./todoAPI\";\n// const todos = [\n//     { title: \"a\", done: true },\n//     { title: \"b\", done: false },\n//     { title: \"c\", done: true }\n// ]\nexport const getTodos = createAsyncThunk('store/fetchTodos', async amount => {\n  const response = await fetchTodos(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nconst initialState = {\n  userName: \"aaa\",\n  todoList: todos,\n  status: 'idle'\n};\nexport const todoSlice = createSlice({\n  name: \"todoList\",\n  initialState,\n  reducers: {\n    changeDone: (state, action) => {\n      state.todoList[action.payload].done = !state.todoList[action.payload].done;\n    },\n    changeUserName: (state, action) => {\n      state.userName = action.payload;\n    },\n    addTodo: (state, action) => {\n      state.todoList.push({\n        title: action.payload,\n        done: false\n      });\n    },\n    deleteTodo: (state, action) => {\n      state.todoList.splice(action.payload, 1);\n    },\n    extraReducers: builder => {\n      builder.addCase(getTodos.pending, state => {\n        state.status = 'loading';\n      }).addCase(getTodos.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.todoList.push(action.payload);\n      });\n    }\n  }\n});\nexport const addNewTodo = title => (dispatch, getState) => {\n  if (!title) {\n    alert(\"ssssssssssss\");\n  } else {\n    dispatch(addTodo(title));\n  }\n};\nexport default todoSlice.reducer;\nexport const {\n  changeDone,\n  changeUserName,\n  addTodo,\n  deleteTodo\n} = todoSlice.actions;\nexport const selectTodo = state => state.list.todoList;\nexport const selectUserName = state => state.list.userName;","map":{"version":3,"sources":["/home/reut/practice-redux/src/store/slice.ts"],"names":["createAsyncThunk","createSlice","todos","fetchTodos","getTodos","amount","response","data","initialState","userName","todoList","status","todoSlice","name","reducers","changeDone","state","action","payload","done","changeUserName","addTodo","push","title","deleteTodo","splice","extraReducers","builder","addCase","pending","fulfilled","addNewTodo","dispatch","getState","alert","reducer","actions","selectTodo","list","selectUserName"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,KAAT,QAAsB,aAAtB;AAGA,SAAQC,UAAR,QAAyB,WAAzB;AAQA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,QAAQ,GAAGJ,gBAAgB,CACpC,kBADoC,EAEpC,MAAOK,MAAP,IAAsD;AAClD,QAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACE,MAAD,CAAjC,CADkD,CAElD;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CANiC,CAAjC;AASP,MAAMC,YAAqB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,KADgB;AAE1BC,EAAAA,QAAQ,EAAER,KAFgB;AAG1BS,EAAAA,MAAM,EAAE;AAHkB,CAA9B;AAMA,OAAO,MAAMC,SAAS,GAAGX,WAAW,CAChC;AACIY,EAAAA,IAAI,EAAE,UADV;AAEIL,EAAAA,YAFJ;AAGIM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACN,QAAN,CAAeO,MAAM,CAACC,OAAtB,EAA+BC,IAA/B,GAAsC,CAACH,KAAK,CAACN,QAAN,CAAeO,MAAM,CAACC,OAAtB,EAA+BC,IAAtE;AACH,KAHK;AAINC,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACH,KANK;AAONG,IAAAA,OAAO,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAExBD,MAAAA,KAAK,CAACN,QAAN,CAAeY,IAAf,CAAoB;AAChBC,QAAAA,KAAK,EAAEN,MAAM,CAACC,OADE;AAEhBC,QAAAA,IAAI,EAAE;AAFU,OAApB;AAIH,KAbK;AAcNK,IAAAA,UAAU,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACN,QAAN,CAAee,MAAf,CAAsBR,MAAM,CAACC,OAA7B,EAAsC,CAAtC;AACH,KAhBK;AAiBNQ,IAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,MAAAA,OAAO,CACJC,OADH,CACWxB,QAAQ,CAACyB,OADpB,EAC8Bb,KAAD,IAAW;AACpCA,QAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,OAHH,EAIGiB,OAJH,CAIWxB,QAAQ,CAAC0B,SAJpB,EAI+B,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,QAAAA,KAAK,CAACL,MAAN,GAAe,MAAf;AACAK,QAAAA,KAAK,CAACN,QAAN,CAAeY,IAAf,CAAoBL,MAAM,CAACC,OAA3B;AACD,OAPH;AAQD;AA1BG;AAHd,CADgC,CAA7B;AAmCP,OAAO,MAAMa,UAAU,GAAIR,KAAD,IAAkC,CAACS,QAAD,EAAWC,QAAX,KAAwB;AAChF,MAAG,CAACV,KAAJ,EAAW;AACPW,IAAAA,KAAK,CAAC,cAAD,CAAL;AACH,GAFD,MAEO;AACHF,IAAAA,QAAQ,CAACX,OAAO,CAACE,KAAD,CAAR,CAAR;AACH;AACJ,CANM;AAQP,eAAeX,SAAS,CAACuB,OAAzB;AAEA,OAAO,MAAM;AAAEpB,EAAAA,UAAF;AAAcK,EAAAA,cAAd;AAA8BC,EAAAA,OAA9B;AAAuCG,EAAAA;AAAvC,IAAsDZ,SAAS,CAACwB,OAAtE;AAEP,OAAO,MAAMC,UAAU,GAAIrB,KAAD,IAAsBA,KAAK,CAACsB,IAAN,CAAW5B,QAApD;AACP,OAAO,MAAM6B,cAAc,GAAIvB,KAAD,IAAsBA,KAAK,CAACsB,IAAN,CAAW7B,QAAxD","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport { todos } from \"./infoTodos\"\nimport { RootState } from \"./store\"\nimport {AppThunk} from \"./store\"\nimport {fetchTodos} from \"./todoAPI\"\n\ninterface TodoInt {\n    userName: string,\n    todoList: { title: string, done: boolean }[],\n    status: 'idle' | 'loading'\n}\n\n// const todos = [\n//     { title: \"a\", done: true },\n//     { title: \"b\", done: false },\n//     { title: \"c\", done: true }\n// ]\n\nexport const getTodos = createAsyncThunk(\n    'store/fetchTodos', \n    async (amount: { title: string, done: boolean }[]) => {\n        const response = await fetchTodos(amount);\n        // The value we return becomes the `fulfilled` action payload\n        return response.data;\n      }\n) \n\nconst initialState: TodoInt = {\n    userName: \"aaa\",\n    todoList: todos,\n    status: 'idle'\n}\n\nexport const todoSlice = createSlice(\n    {\n        name: \"todoList\",\n        initialState,\n        reducers: {\n            changeDone: (state, action) => {\n                state.todoList[action.payload].done = !state.todoList[action.payload].done;\n            },\n            changeUserName: (state, action) => {\n                state.userName = action.payload\n            },\n            addTodo: (state, action) => {\n\n                state.todoList.push({\n                    title: action.payload,\n                    done: false\n                })\n            },\n            deleteTodo: (state, action) => {\n                state.todoList.splice(action.payload, 1);\n            },\n            extraReducers: (builder) => {\n                builder\n                  .addCase(getTodos.pending, (state) => {\n                    state.status = 'loading';\n                  })\n                  .addCase(getTodos.fulfilled, (state, action) => {\n                    state.status = 'idle';\n                    state.todoList.push(action.payload);\n                  });\n              }\n        }\n    }\n)\n\nexport const addNewTodo = (title: string|null): AppThunk => (dispatch, getState) => {\n    if(!title) {\n        alert(\"ssssssssssss\")\n    } else {\n        dispatch(addTodo(title))\n    }\n}\n\nexport default todoSlice.reducer;\n\nexport const { changeDone, changeUserName, addTodo, deleteTodo } = todoSlice.actions;\n\nexport const selectTodo = (state: RootState) => state.list.todoList;\nexport const selectUserName = (state: RootState) => state.list.userName;"]},"metadata":{},"sourceType":"module"}